// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Retailer.Infrastructure.Persistence;

#nullable disable

namespace Retailer.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250505052949_RenameDiscountTable")]
    partial class RenameDiscountTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("retailer")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Retailer.Core.DiscountPolicies.DiscountCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountPolicyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountPolicyId");

                    b.ToTable("DiscountConditions", "retailer");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Retailer.Core.DiscountPolicies.DiscountPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscountPolicyType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiscountPolicies", "retailer");

                    b.HasDiscriminator<string>("DiscountPolicyType").HasValue("DiscountPolicy");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Retailer.Core.Sales.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sales", "retailer");
                });

            modelBuilder.Entity("Retailer.Core.Sales.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems", "retailer");
                });

            modelBuilder.Entity("Retailer.Core.DiscountPolicies.MinimumTotalDiscountCondition", b =>
                {
                    b.HasBaseType("Retailer.Core.DiscountPolicies.DiscountCondition");

                    b.Property<decimal>("MinTotal")
                        .HasColumnType("numeric");

                    b.ToTable("MinimumTotalDiscountConditions", "retailer");
                });

            modelBuilder.Entity("Retailer.Core.DiscountPolicies.ProductDiscountCondition", b =>
                {
                    b.HasBaseType("Retailer.Core.DiscountPolicies.DiscountCondition");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.ToTable("ProductDiscountConditions", "retailer");
                });

            modelBuilder.Entity("Retailer.Core.DiscountPolicies.FixedAmountDiscountPolicy", b =>
                {
                    b.HasBaseType("Retailer.Core.DiscountPolicies.DiscountPolicy");

                    b.Property<decimal>("FixedAmount")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("FixedAmountDiscountPolicy");
                });

            modelBuilder.Entity("Retailer.Core.DiscountPolicies.PercentageDiscountPolicy", b =>
                {
                    b.HasBaseType("Retailer.Core.DiscountPolicies.DiscountPolicy");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("PercentageDiscountPolicy");
                });

            modelBuilder.Entity("Retailer.Core.DiscountPolicies.DiscountCondition", b =>
                {
                    b.HasOne("Retailer.Core.DiscountPolicies.DiscountPolicy", null)
                        .WithMany("Conditions")
                        .HasForeignKey("DiscountPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Retailer.Core.Sales.Sale", b =>
                {
                    b.OwnsMany("Retailer.Core.Sales.Discount", "AppliedDiscounts", b1 =>
                        {
                            b1.Property<Guid>("SaleId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("PolicyId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Total")
                                .HasColumnType("numeric");

                            b1.HasKey("SaleId", "Id");

                            b1.ToTable("AppliedDiscounts", "retailer");

                            b1.WithOwner()
                                .HasForeignKey("SaleId");
                        });

                    b.Navigation("AppliedDiscounts");
                });

            modelBuilder.Entity("Retailer.Core.Sales.SaleItem", b =>
                {
                    b.HasOne("Retailer.Core.Sales.Sale", null)
                        .WithMany("Items")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Retailer.Core.DiscountPolicies.MinimumTotalDiscountCondition", b =>
                {
                    b.HasOne("Retailer.Core.DiscountPolicies.DiscountCondition", null)
                        .WithOne()
                        .HasForeignKey("Retailer.Core.DiscountPolicies.MinimumTotalDiscountCondition", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Retailer.Core.DiscountPolicies.ProductDiscountCondition", b =>
                {
                    b.HasOne("Retailer.Core.DiscountPolicies.DiscountCondition", null)
                        .WithOne()
                        .HasForeignKey("Retailer.Core.DiscountPolicies.ProductDiscountCondition", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Retailer.Core.DiscountPolicies.DiscountPolicy", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("Retailer.Core.Sales.Sale", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
